// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package delogo_submit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DelogoSubmiterClient is the client API for DelogoSubmiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DelogoSubmiterClient interface {
	Submit(ctx context.Context, in *DelogoSubmitRequest, opts ...grpc.CallOption) (*DelogoSubmitReply, error)
}

type delogoSubmiterClient struct {
	cc grpc.ClientConnInterface
}

func NewDelogoSubmiterClient(cc grpc.ClientConnInterface) DelogoSubmiterClient {
	return &delogoSubmiterClient{cc}
}

func (c *delogoSubmiterClient) Submit(ctx context.Context, in *DelogoSubmitRequest, opts ...grpc.CallOption) (*DelogoSubmitReply, error) {
	out := new(DelogoSubmitReply)
	err := c.cc.Invoke(ctx, "/delogo_submit.DelogoSubmiter/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DelogoSubmiterServer is the server API for DelogoSubmiter service.
// All implementations must embed UnimplementedDelogoSubmiterServer
// for forward compatibility
type DelogoSubmiterServer interface {
	Submit(context.Context, *DelogoSubmitRequest) (*DelogoSubmitReply, error)
	mustEmbedUnimplementedDelogoSubmiterServer()
}

// UnimplementedDelogoSubmiterServer must be embedded to have forward compatible implementations.
type UnimplementedDelogoSubmiterServer struct {
}

func (UnimplementedDelogoSubmiterServer) Submit(context.Context, *DelogoSubmitRequest) (*DelogoSubmitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedDelogoSubmiterServer) mustEmbedUnimplementedDelogoSubmiterServer() {}

// UnsafeDelogoSubmiterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DelogoSubmiterServer will
// result in compilation errors.
type UnsafeDelogoSubmiterServer interface {
	mustEmbedUnimplementedDelogoSubmiterServer()
}

func RegisterDelogoSubmiterServer(s grpc.ServiceRegistrar, srv DelogoSubmiterServer) {
	s.RegisterService(&DelogoSubmiter_ServiceDesc, srv)
}

func _DelogoSubmiter_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelogoSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelogoSubmiterServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delogo_submit.DelogoSubmiter/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelogoSubmiterServer).Submit(ctx, req.(*DelogoSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DelogoSubmiter_ServiceDesc is the grpc.ServiceDesc for DelogoSubmiter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DelogoSubmiter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "delogo_submit.DelogoSubmiter",
	HandlerType: (*DelogoSubmiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _DelogoSubmiter_Submit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/delogo_submit.proto",
}
